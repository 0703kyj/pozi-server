name: Java CI/CD with Gradle

on:
  push:
    branches:
      - main
env:
  DOCKER_REGISTRY_URL: ${{ secrets.DOCKER_REGISTRY_URL }}
  DOCKER_IMAGE_NAME: pozi-server
  DOCKER_CONTAINER_NAME: pozi-server
  SERVER_PORT: 8080

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permisson for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker build
        run: |
          docker build --platform linux/amd64 -t ${{ env.DOCKER_IMAGE_NAME }} .   
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          echo "::set-output name=image::${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Log in to NCP Docker Registry
        run: echo "${{ secrets.DOCKER_REGISTRY_PASSWORD }}" | docker login ${{ env.DOCKER_REGISTRY_URL }} -u ${{ secrets.DOCKER_REGISTRY_USERNAME }} --password-stdin

      - name: Push Docker Image to NCP Registry
        run: docker push ${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_IMAGE_NAME }}
  deploy-to-ncp:
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    steps:

    - name: Deploy via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ env.DOCKER_REGISTRY_URL }}
          docker stop ${{ env.DOCKER_CONTAINER_NAME }}
          docker rm ${{ env.DOCKER_CONTAINER_NAME }}
          docker pull ${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_IMAGE_NAME }}
          docker run -d --name ${{ env.DOCKER_CONTAINER_NAME }} -p ${{ env.SERVER_PORT }}:8080 -e NAVER_ID=${{ secrets.NAVER_ID }} -e NAVER_SECRET={{ secrets.NAVER_SECRET }} -e NAVER_MAP_ID={{ secrets.NAVER_MAP_ID }} -e NAVER_MAP_SECRET={{ secrets.NAVER_MAP_SECRET }} ${{ env.DOCKER_REGISTRY_URL }}/${{ env.DOCKER_IMAGE_NAME }} sleep infinity
          docker rm $(docker ps --filter 'status=exited' -a -q)
          docker image prune -a -f
